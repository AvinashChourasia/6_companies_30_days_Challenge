class Solution {
    
    public int maxRotateFunction(int[] nums) {
        int F = 0;
        int S = 0;
        int n = nums.length;
        for(int i=0;i<n;i++){
            F += (i*nums[i]);
            S += nums[i];
        }
        int max = F;
        for(int i=n-1;i>=1;i--){
            F = F+S-n*nums[i];
            max = Math.max(max,F);
        }
        return max;
    }


    //  Method 1 :- T.C. = O(N*N)

    // public int maxRotateFunction(int[] nums) {
    //     int n = nums.length;
    //     int max = Integer.MIN_VALUE;
    //     for(int i=0;i<n;i++){
    //         max = Math.max(max, function(nums,n,i) );
    //     }
    //     return max;
    // }

    // public static int function(int nums[],int n,int k){
    //     int sum = 0;
    //     int i = 0;
    //     for(int j=k;j<n;j++){
    //         sum += (i*nums[j]);
    //         i++;
    //     }
    //     for(int j=0;j<k;j++){
    //         sum += (i*nums[j]);
    //         i++;
    //     }

    //     return sum;
    // }


}
