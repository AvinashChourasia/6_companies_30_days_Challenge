
public class Pair{
    int f,s;
    Pair(int f, int s){
        this.f = f;
        this.s = s;
    }
}

class Solution {

    public int networkDelayTime(int[][] times, int n, int k) {

        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }
        int m = times.length;
        for(int i=0;i<m;i++){
            adj.get(times[i][0]).add(new Pair(times[i][1],times[i][2]));
        }
        int dist[] = new int[n+1];
        for(int i=1;i<=n;i++){
            dist[i]= (int)(1e9);
        }
        dist[k]=0;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(0,k)); 
        while(!q.isEmpty()){
            int node = q.peek().s;
            int dis = q.peek().f;
            q.poll();
            for(Pair item:adj.get(node)){
                int adjNode = item.f;
                int wt = item.s;
                if(dis+wt<dist[adjNode]){
                    dist[adjNode] = dis+wt;
                    q.add(new Pair(dist[adjNode],adjNode));
                }
            }
        }
        for(int i=1;i<=n;i++){
            if(dist[i]==(int)(1e9)){
                return -1;
            }
        }
        Arrays.sort(dist);
        return dist[n];
    }
}
