

public class Pair{
        int first;
        int second;
        public Pair(int first,int second){
            this.first = first;
            this.second = second;
    }
}

class Solution {
    
    boolean flag = true;
    public int closedIsland(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int visited[][] = new int[n][m];
        
        int count = 0;
        for(int row = 1; row <n-1;row++){
            for(int col =1;col<m-1;col++){
                if(visited[row][col]==0 && grid[row][col]==0 ){
                    flag = true;
                    bfs(grid,visited,row,col);
                    if(flag==true){
                        count++;
                    }
                }
            }
        }
        return count;
    }

    public void bfs(int grid[][], int visited[][], int r,int c){
        int n = grid.length;
        int m = grid[0].length;
        visited[r][c]=1;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(r,c));
        int delrow[] = {-1,0,+1,0};
        int delcol[] = {0,+1,0,-1}; 
        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            q.poll();
            for(int i=0;i<4;i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0 && visited[nrow][ncol]==0){
                    if(nrow==0 || ncol==0 || nrow==n-1 || ncol==m-1){
                        flag = false;
                    }
                    visited[nrow][ncol] = 1;
                    q.add(new Pair(nrow,ncol));
                }
            }
        }
        if(flag!=false){
            flag=true;
        }
    }


}
